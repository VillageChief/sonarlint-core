--- SonarLintLanguageServer.java
+++ SonarLintLanguageServer.java
@@ -99,40 +105,48 @@ import org.eclipse.lsp4j.services.LanguageClient;
 import org.eclipse.lsp4j.services.LanguageServer;
 import org.eclipse.lsp4j.services.TextDocumentService;
 import org.eclipse.lsp4j.services.WorkspaceService;
-import org.sonarsource.sonarlint.core.StandaloneSonarLintEngineImpl;
 import org.sonarsource.sonarlint.core.client.api.common.RuleDetails;
 import org.sonarsource.sonarlint.core.client.api.common.analysis.AnalysisResults;
 import org.sonarsource.sonarlint.core.client.api.common.analysis.ClientInputFile;
 import org.sonarsource.sonarlint.core.client.api.common.analysis.Issue;
-import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneAnalysisConfiguration;
-import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneGlobalConfiguration;
-import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneGlobalConfiguration.Builder;
-import org.sonarsource.sonarlint.core.client.api.standalone.StandaloneSonarLintEngine;
 import org.sonarsource.sonarlint.core.telemetry.TelemetryPathManager;
 
-public class SonarLintLanguageServer implements LanguageServer, WorkspaceService, TextDocumentService {
+import com.google.common.annotations.VisibleForTesting;
+import com.google.gson.JsonIOException;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonSyntaxException;
+import com.google.gson.internal.Streams;
+import com.google.gson.stream.JsonWriter;
 
+public class SonarLintLanguageServer implements LanguageServer, WorkspaceService, TextDocumentService {
+  static final String SERVERS = "servers";
   static final String DISABLE_TELEMETRY = "disableTelemetry";
   static final String TEST_FILE_PATTERN = "testFilePattern";
   static final String ANALYZER_PROPERTIES = "analyzerProperties";
-  private static final String SONARLINT_CONFIGURATION_NAMESPACE = "sonarlint";
+  private static final String SONARLINT_CONFIGURATION_NAMESPACE = "codescan";
   private static final String SONARLINT_SOURCE = SONARLINT_CONFIGURATION_NAMESPACE;
   private static final String SONARLINT_OPEN_RULE_DESCRIPTION_COMMAND = "SonarLint.OpenRuleDesc";
 
   private final LanguageClient client;
-  private final StandaloneSonarLintEngine engine;
   private final Future<?> backgroundProcess;
   private final LanguageClientLogOutput logOutput;
 
   private final Map<URI, String> languageIdPerFileURI = new HashMap<>();
   private final SonarLintTelemetry telemetry = new SonarLintTelemetry();
+  private static final Map<String, String> languageMapping = new HashMap<>();
 
   private UserSettings userSettings = new UserSettings();
 
   private Path workspaceDir;
+  private final EngineFactory engineFactory;
+  
+  static {
+	  languageMapping.put("apex", "sf");
+	  languageMapping.put("visualforce", "vf");
+  }
 
   public SonarLintLanguageServer(InputStream inputStream, OutputStream outputStream, Collection<URL> analyzers) {
-
     Launcher<LanguageClient> launcher = LSPLauncher.createServerLauncher(this,
       inputStream,
       outputStream,
@@ -140,26 +154,16 @@ public class SonarLintLanguageServer implements LanguageServer, WorkspaceService
 
     this.client = launcher.getRemoteProxy();
     this.logOutput = new LanguageClientLogOutput(client);
+    this.engineFactory = new EngineFactory(client, logOutput, analyzers.toArray(new URL[0]));
 
     info("Starting SonarLint engine...");
     info("Using " + analyzers.size() + " analyzers");
 
-    try {
-      Builder builder = StandaloneGlobalConfiguration.builder()
-        .setLogOutput(logOutput)
-        .addPlugins(analyzers.toArray(new URL[0]));
-
-      this.engine = new StandaloneSonarLintEngineImpl(builder.build());
-    } catch (Exception e) {
-      error("Error starting SonarLint engine", e);
-      throw new IllegalStateException(e);
-    }
-
     info("SonarLint engine started");
 
     backgroundProcess = launcher.startListening();
   }
-
+  
   public static SonarLintLanguageServer bySocket(int port, Collection<URL> analyzers) throws IOException {
     Socket socket = new Socket("localhost", port);
     return new SonarLintLanguageServer(socket.getInputStream(), socket.getOutputStream(), analyzers);
@@ -169,23 +173,32 @@ public class SonarLintLanguageServer implements LanguageServer, WorkspaceService
     @CheckForNull
     final String testFilePattern;
     final Map<String, String> analyzerProperties;
+    final Map<String, SonarQubeServer> servers;
     final boolean disableTelemetry;
 
     private UserSettings() {
       this(Collections.emptyMap());
     }
 
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private UserSettings(Map<String, Object> params) {
       this.testFilePattern = (String) params.get(TEST_FILE_PATTERN);
-      this.analyzerProperties = (Map) params.getOrDefault(ANALYZER_PROPERTIES, Collections.emptyMap());
       this.disableTelemetry = (Boolean) params.getOrDefault(DISABLE_TELEMETRY, false);
+      
+      //ensure not null returned
+      Map analyzerProperties = (Map) params.getOrDefault(ANALYZER_PROPERTIES, Collections.emptyMap());
+      if ( analyzerProperties == null )
+        analyzerProperties = Collections.emptyMap();
+      this.analyzerProperties = analyzerProperties;
+      
+      this.servers = new HashMap<>();
+      for ( Map<String, String> map : (List<Map<String, String>>) params.getOrDefault(SERVERS, Collections.emptyList()) ) {
+    	  SonarQubeServer server = new SonarQubeServer(map);
+    	  this.servers.put(server.id(), server);
+      }
     }
   }
 
-  private void debug(String message) {
-    client.logMessage(new MessageParams(MessageType.Log, message));
-  }
-
   private void info(String message) {
     client.logMessage(new MessageParams(MessageType.Info, message));
   }
